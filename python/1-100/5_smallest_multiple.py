# Задача 5. Наименьшее кратное.
#
# 2520 - самое маленькое число, которое делится без остатка на все числа от 1 до 10.
#
# Какое самое маленькое число делится нацело на все числа от 1 до 20?
#

from math import factorial


def is_prime(num):
    '''Функция определения простого числа

    Принимает на вход число и проверяет путем перебора, являеться ли он простым
    Возвращает булевое значение'''
    i = 2
    while num % i != 0:
        i += 1
    return i == num

def prime_fact(num):
    '''Функция разложения числа на простые множители

    Принимает на вход число, которое необходимо разложить на простые множители. Использует в своем теле функцию is_prime() для индетификации простого числа.
    Возвращает массив простых чисел '''
    factors = [] # массив который будем возвращать, пока он пустой
    i = 2 # первое простое число после 1, на 1 смысла делить нет
    while num != 1: # делим входное число, на простые множители, пока оно не станет 1
        while num % i != 0: # ищем число которое делит входное число без остатка
            i += 1
        if is_prime(i): # если это число простое, то
            num = num / i # делим входное число на него
            factors.append(i) # и добавляем его в массив протсых чисел
            i = 2 # возвращаемся к 2
        else:
            i += 1 # если не простое, то увеличиваем его
    return factors # возвращаем массив простых чисел

def search_least_multiple(num):
    '''Функция поиска наименьшего кратного последовательности чисел от 1 до заданного (num) числа

    Принцип поиска заключается в том, чтобы исключить число, которое может быть получено среди имеющихся простых чисел текущего наименьшего общего кратного.
    Использует в своем теле функцию prime_fact()
    Возвращает число'''
    sum_factors = {} # словарь вида {"простое_число": "его степень"} для конечного наимешьнего числа
    least_multip = 1 # наименьшее число, пока это 1
    for i in range(2, num+1): # Перебираем каждое число последовательности
        factors = {} # словарь вида {"простое_число": "его степень"} для текущего числа
        for prime in prime_fact(i): # добавляем простые множители в словарь степеней
            if prime not in factors:
                factors[prime] = 1
            else:
                factors[prime] = factors.get(prime) + 1
        for z in factors: # отбираем числа, которые будут входить в НОК
            if sum_factors.get(z) == None:
                 sum_factors[z] = factors.get(z)
            elif sum_factors[z] < factors[z]:
                sum_factors[z] = factors.get(z)
    for key in sum_factors: # преобразуем простые множители в число
        least_multip = least_multip * (key ** sum_factors.get(key) )
    return least_multip


num = 20
print('Наименьшое число, которое делиться на последовательность цифр от 1 до {0} являеться {1}'.format(num, search_least_multiple(num))) # Выводим данные
